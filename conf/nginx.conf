worker_processes  1;
error_log error.log;


events {
    worker_connections 1024;
}
http {
    lua_package_path 'plugin/?.lua;;;;';
    lua_package_cpath ';;';
    
    resolver 8.8.8.8;
    resolver_timeout 10s;

    upstream backend {
        server 0.0.0.1;   # just an invalid address as a place holder

        balancer_by_lua_block {
            local balancer = require "ngx.balancer"

            local host = "172.217.0.46"
            local port = 80

            local ok, err = balancer.set_current_peer(host, port)
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(500)
            end
        }

        keepalive 10;  # connection pool
    }

    init_by_lua_block {
        ruleset     = require "ruleset"
        queryview   = require "query"
    }

    server {
        listen 9001;
        root   /Users/bsinha/akashvani/www;
        index index.html;

        location /home {
            root /Users/bsinha/akashvani/www;
        }

        location /load {

            content_by_lua_block {          
                local file = ngx.var.document_root .. "/attacksurface.json"
                local f = io.open(file, "rb")
                local content = f:read("*all")
                f:close()


                local rule_file = ngx.var.document_root .. "/defense.json"
                local f1 = io.open(rule_file, "rb")
                local rule_content = f1:read("*all")
                f1:close()

                local ruleset = ruleset("")

                ----------------------------------
                -- Loads rules from a JSON Buffer
                ----------------------------------
                ruleset:loadFromBuffer(content, rule_content)
            }
        }

        location /showrule {
            default_type text/html;

            content_by_lua_block {
                local view = queryview()
                view:showRule(ngx.var.QUERY_STRING)
            }
        }

        location /showroutes {
            default_type text/html;

            content_by_lua_block {
                local view = queryview()
                view:showRoutes()
            }
        }


        location / {
            default_type text/html;
            set $target "";

            access_by_lua_block {
                local request_uri = ngx.var.request_uri
                local rules = ruleset("helloshiftleft")
                local app_properties = rules:get_endpoint()

                local application_name = app_properties[2]
                local application_host = app_properties[4]
                local application_port = app_properties[6]

                -------------------------------------------
                -- Resolve for localhost
                -- TODO [bsinha] find a better way to do it
                -------------------------------------------
                if (application_host == 'localhost') then
                    application_host = "127.0.0.1"
                end

                --------------------------------------------------------------------
                -- Check if the request URL contains one of the configured upstreams
                --------------------------------------------------------------------
                local contains = 0
                local counter = 0
                local request_uri_normalized = request_uri
                local getparams = rules:extract_params(application_host .. application_port .. request_uri)
                
                for k, v in pairs(getparams) do
                    counter =  1
                    break;
                end 

                if (counter > 0) then
                    --There are Get Parameters, so we need to remove the characters after the ?
                    result = {}
                    for substr in string.gmatch(request_uri, "[^".. "?" .. "]*") do
                        if substr ~= nil and string.len(substr) > 0 then
                            table.insert(result,substr)
                        end
                    end

                    -----------------------------------------------------------------------------------------
                    -- Overwrite the request URL with the GET Parameters removed such that it will match the
                    -- Redis Upstream URL Key
                    -----------------------------------------------------------------------------------------
                    request_uri_normalized = result[1]
                    getparams = rules:extract_params(result[2])
                end

                contains = rules:contains_upstream("application:" .. application_name, request_uri_normalized )

                function sh(out)
                    ngx.say ("<H1> <FONT COLOR=RED> " ..  out .. "</FONT> </H1>")
                end
                
                if (contains == 0) then
                    ngx.say ("<H3>Path to :" .. application_host .. ":" .. application_port .. request_uri .. " does not exist.</H3>")
                else
                    local application_key = "application:" .. application_name

                    local block, out = rules:apply_access_filter(application_key, request_uri_normalized, getparams)

                    if (block == true) then
                        sh(out)
                     else 
                        local headers = ngx.req.get_headers()
                        local block, out = rules:apply_header_filter(application_key, request_uri_normalized, headers)

                        if (block == true) then
                            sh(out)
                        else
                            ngx.req.read_body()
                            local body_data = ngx.req.get_body_data()
                            local block, out = rules:apply_body_filter(application_key,request_uri_normalized, body_data)

                            if (block == true) then
                                sh(out)
                            else
                                -----------------
                                -- ALL CLEAR
                                -----------------
                                ngx.var.target = application_host .. ":" .. application_port .. request_uri 
                            end
                        end
                    end
                end

            }

            # reverse proxy setup
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # TODO [bsinha] Asumed scheme to be http
            proxy_pass http://$target;
           
        }
 
    }
}
